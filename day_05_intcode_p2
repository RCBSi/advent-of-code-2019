def rp(x,n): #read n parameters as digits from n.
    if n==0:
        return []
    else:
        return [x%10] + rp(x//10,n-1)

def ron(pg,gi,vi,gem): #run one: program, index, value_in, global error-printing mode.
    op = pg[gi]%100 #opcode
    np = {1:3,2:3,3:1,4:1,5:2,6:2,7:3,8:3} # number of parameters
    try:
        mp = rp(pg[gi]//100,np[op]) #mode parameters
    except KeyError:
        print("HCF-mp",pg,gi,vi,op)
    ao = pg[gi+1:gi+np[op]+1] #parameters of the active opcode pg[gi]
    ar = []
    for i in range(len(ao)):
        if mp[i] == 1:
            ar.append(ao[i])
        elif mp[i] == 0:
            try:
                ar.append(pg[ao[i]])
            except IndexError:
                print("HCF-ar.append when mode = 0, gi=",gi,ao)
    if gem:
        print("Op", op, "at", gi, "ref", ao, "args",ar,{True:vi, None:''}[vi and True], "wr",{1:ao[-1], 0:'.'}[{1:1, 2:1, 3:1, 4:0, 5:0, 6:0, 7:1, 8:1}[op]]) #references
    if op == 1:
        pg[ao[-1]] = ar[0] + ar[1]    
        return (pg, gi + np[op] + 1, None)
    if op == 2:
        pg[ao[-1]] = ar[0] * ar[1]        
        return (pg, gi + np[op] + 1, None)
    if op == 3:
        try:
            pg[ao[-1]] = vi
        except IndexError:
            print("HCF-3",gi,vi,op,mp,ao,ar)
        return (pg, gi + np[op] + 1, None)
    if op == 4:
        return (pg, gi + np[op] + 1, ar[0])
    if op == 5:
        return (pg, {True:ar[1], False:gi + np[op]+1}[ar[0] and True], None)
    if op == 6:
        return (pg, {True:gi + np[op]+1, False: ar[1]}[ar[0] and True], None)
    if op == 7:
        pg[ao[-1]] = {True:1, False:0}[ar[0] < ar[1]]
        return (pg, gi + np[op] + 1, None)    
    if op == 8: 
        pg[ao[-1]] = {True:1, False:0}[ar[0] == ar[1]]
        return (pg, gi + np[op] + 1, None)  

def run(pg,vi,gem):
    gi = 0 # global index
    while pg[gi] != 99:
        (pg, gi, vi) = ron(pg, gi, vi, gem)
    return vi #, pg[0]

with open('y2019day05text01.txt', 'r') as file:
    t = [x.strip() for x in file.readlines()]

for u in t:
    pg = [int(x) for x in u.split(",")]
    print(run(pg,5,1)) #the final bit prints to debug.

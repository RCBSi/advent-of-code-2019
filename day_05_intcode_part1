def rp(x,n): #read n parameters as digits from n.
    if n==0:
        return []
    else:
        return [x%10] + rp(x//10,n-1)

def ron(pg,gi,vi,gem): #run one: program, index, value_in, global error-printing mode.
    op = pg[gi]%100 #opcode
    np = {1:3,2:3,3:1,4:1} # number of parameters
    try:
        mp = rp(pg[gi]//100,np[op]) #mode parameters
    except KeyError:
        print("HCF-mp",pg,gi,vi,op)
    ao = pg[gi+1:gi+np[op]+1] #parameters of the active opcode pg[gi]
    ar = []
    for i in range(len(ao)):
        if mp[i] == 1:
            ar.append(ao[i])
        elif mp[i] == 0:
            ar.append(pg[ao[i]])
    if gem:
        print("HCF-ar",gi,vi,op,mp,ao,ar)
    if op == 1:
        pg[ao[-1]] = ar[0] + ar[1]
        if gem:
            print("HCF-1",gi,vi,op,mp,ao,ar)        
        return (pg, gi + np[op] + 1, None)
    if op == 2:
        pg[ao[-1]] = ar[0] * ar[1]        
        return (pg, gi + np[op] + 1, None)
    if op == 3:
        try:
            pg[ao[-1]] = vi
        except IndexError:
            print("HCF-3",gi,vi,op,mp,ao,ar)
        if gem:
            print("HCF-3",gi,vi,op,mp,ao,ar)
        return (pg, gi + np[op] + 1, None)
    if op == 4:
        return (pg, gi + np[op] + 1, ar[0])

def run(pg,vi,gem): # global error mode = 1 will print more maths.
    gi = 0 # global index
    while pg[gi] != 99:
        if gem:
            print("HCF-gem-pre",gem,gi,vi)
        (pg, gi, vi) = ron(pg, gi, vi, gem)
        if gem:
            print("HCF-gem-pos",gem,gi,vi)        
    return vi #, pg[0]

with open('y2019day05text01.txt', 'r') as file:
    t = [x.strip() for x in file.readlines()]

for u in t:
    pg = [int(x) for x in u.split(",")]
    print(run(pg,1,1)) #the final bit prints to debug.

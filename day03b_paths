with open('day03.txt', 'r') as file:
    paths = [li.strip() for li in file.readlines()]

def point(base,direction,distance):
    (x,y) = base
    if direction == 'R':
        return (x+distance, y)
    if direction == 'D':
        return (x, y-distance)
    if direction == 'U':
        return (x, y+distance)
    if direction == 'L':
        return (x-distance, y)


def track(path):
    tr = [(0,0)]
    for x in path:
        tr = tr+[point(tr[-1],x[0],i+1) for i in range(int(x[1:]))]
    return tr

def intersect(i,j):
    return [x for x in track(paths[i].split(',')) if x in track(paths[j].split(','))]

def manhattan(p):
    (x,y) = p
    return abs(x)+abs(y)

def first_intersection(a,b):
    if len(b) < len(a):
        (a,b) = (b,a)
    for ipj in range(len(a)+len(b)):
        if ipj <= len(a):
            r = range(ipj)
        if ipj > len(a) and ipj <= len(b):
            r = range(len(a))
        if ipj > len(b):
            r = range(ipj-len(b),len(a))
        for i in r:
            if a[i] == b[ipj-i]:
                return [ipj, i, ipj-i, a[i]]

t0 = track(paths[0].split(','))[1:]
t1 = track(paths[1].split(','))[1:]
breakpoint()
print(first_intersection(t0,t1)[0]+2)
breakpoint()

breakpoint()
print(track(paths[0].split(',')))

print(track(paths[0]))

print(paths[2])
print(min([manhattan(p) for p in intersect(3,4) if p != (0,0)]))
print(paths[5])
print(min([manhattan(p) for p in intersect(6,7) if p != (0,0)]))
print(paths[8])

# This seems wasteful, to search the entire space of timesteps. 
# Gradient descent would literally point us in the right direction. 
